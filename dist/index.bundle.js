(()=>{var t={757:(t,e,r)=>{t.exports=r(666)},666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function s(t,e,r,n){var o=e&&e.prototype instanceof g?e:g,a=Object.create(o.prototype),i=new _(n||[]);return a._invoke=function(t,e,r){var n=l;return function(o,a){if(n===d)throw new Error("Generator is already running");if(n===v){if("throw"===o)throw a;return S()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var c=C(i,r);if(c){if(c===p)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var u=h(t,e,r);if("normal"===u.type){if(n=r.done?v:f,u.arg===p)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=v,r.method="throw",r.arg=u.arg)}}}(t,r,i),a}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var l="suspendedStart",f="suspendedYield",d="executing",v="completed",p={};function g(){}function y(){}function m(){}var w={};u(w,a,(function(){return this}));var b=Object.getPrototypeOf,x=b&&b(b(j([])));x&&x!==r&&n.call(x,a)&&(w=x);var k=m.prototype=g.prototype=Object.create(w);function E(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function r(o,a,i,c){var u=h(t[o],t,a);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==typeof l&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,i,c)}),(function(t){r("throw",t,i,c)})):e.resolve(l).then((function(t){s.value=t,i(s)}),(function(t){return r("throw",t,i,c)}))}c(u.arg)}var o;this._invoke=function(t,n){function a(){return new e((function(e,o){r(t,n,e,o)}))}return o=o?o.then(a,a):a()}}function C(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,C(t,r),"throw"===r.method))return p;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var o=h(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,p;var a=o.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,p):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,p)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function _(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function j(t){if(t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}return{next:S}}function S(){return{value:e,done:!0}}return y.prototype=m,u(k,"constructor",m),u(m,"constructor",y),y.displayName=u(m,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u(t,c,"GeneratorFunction")),t.prototype=Object.create(k),t},t.awrap=function(t){return{__await:t}},E(L.prototype),u(L.prototype,i,(function(){return this})),t.AsyncIterator=L,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new L(s(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},E(k),u(k,c,"Generator"),u(k,a,(function(){return this})),u(k,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=j,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=t,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,p):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),p},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),p}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;O(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:j(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),p}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,r),a.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";function t(t,e,r,n,o,a,i){try{var c=t[a](i),u=c.value}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o)}var e=r(757),n=r.n(e);function o(t){var e,r,n;return t[(0,e=t.length-1,r=Math.ceil(0),n=Math.floor(e),Math.floor(Math.random()*(n-r+1)+r))]}function a(){for(var t=[],e="ABCDEFGHIJ",r=0;r<e.length;r+=1)for(var n=1;n<=10;n+=1)t.push(e.charAt(r)+n);return t}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e,r){return e&&c(t.prototype,e),r&&c(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}var s=function(){function t(){i(this,t),this.coordinates=a(),this.ships=[]}return u(t,[{key:"getShips",get:function(){return this.ships}},{key:"placeShip",value:function(t,e){var r=this,n=[],o=!0,a="ABCDEFGHIJ";if(t.isVertical)for(var i=0;i<t.length;i+=1)n.push(a.charAt(a.indexOf(e.charAt(0))+i)+e.charAt(1));else for(var c=0;c<t.length;c+=1)n.push(e.charAt(0)+(Number(e.charAt(1))+c));return n.forEach((function(t){-1===r.coordinates.indexOf(t)&&(o=!1)})),o?(t.setCoordinates(n),this.ships.push(t),n.forEach((function(t){r.coordinates.splice(r.coordinates.indexOf(t),1)})),"OK"):"ERROR"}},{key:"receiveAttack",value:function(t){var e=this,r="miss";return this.ships.forEach((function(n){-1!==n.coordinates.indexOf(t)&&(n.hit(t),r="hit",n.isSunk()&&(e.ships.splice(e.ships.indexOf(n),1),r="sunk"),0===e.ships.length&&(r="game over"))})),r}}]),t}(),h=function(){function t(e,r){i(this,t),this.name=e,this.fleet=r,this.gameboard=new s,this.isAI=!1}return u(t,[{key:"getAttacked",value:function(t){return this.gameboard.receiveAttack(t)}}]),t}(),l=function(){function t(e){i(this,t),this.length=e,this.isVertical=!1}return u(t,[{key:"setCoordinates",value:function(t){this.coordinates=t}},{key:"getCoordinates",get:function(){return this.coordinates}},{key:"rotate",value:function(){this.isVertical?this.isVertical=!1:this.isVertical=!0}},{key:"hit",value:function(t){for(var e=0;e<this.coordinates.length;e+=1)if(this.coordinates[e]===t){this.coordinates.splice(e,1);break}}},{key:"isSunk",value:function(){return 0===this.coordinates.length}}]),t}(),f=document.querySelectorAll(".gameboard"),d=document.querySelector(".message"),v=a();f.forEach((function(t){for(var e=0;e<100;e+=1){var r=document.createElement("div");r.classList.add("cell"),r.setAttribute("data-coord",v[e]),t.appendChild(r)}}));var p=document.querySelectorAll("#player1 .cell"),g=document.querySelectorAll("#player2 .cell");d.textContent="Place your ships! (press 'R' to rotate)";var y=function(){return[new l(5),new l(4),new l(3),new l(2),new l(2),new l(1),new l(1)]},m=new h("Player 1",y()),w=new h("Computer",y());w.isAI=!0,function(){var e,r,i,c,u,s=function(t){m.gameboard.placeShip(m.fleet[0],t.target.getAttribute("data-coord")),p.forEach((function(t){for(var e=0;e<m.fleet[0].length;e+=1)t.getAttribute("data-coord")===r[e]&&(t.style.backgroundColor="rgb(139, 139, 139)")})),m.fleet.shift()},h=function(t,n,o){var a=[],i=n;e=n;var c=!0,u="ABCDEFGHIJ",h=n.getAttribute("data-coord").charAt(0),l=Number(n.getAttribute("data-coord").slice(1));if(t.isVertical)for(var f=0;f<t.length;f+=1)a.push(u.charAt(u.indexOf(h)+f)+l);else for(var d=0;d<t.length;d+=1)a.push(h+(l+d));r=a;for(var v=0;v<a.length;v+=1)-1===o.coordinates.indexOf(a[v])&&(c=!1);c?(p.forEach((function(t){for(var e=0;e<a.length;e+=1)t.getAttribute("data-coord")===a[e]&&(t.style.backgroundColor="green")})),i.addEventListener("click",s),i.addEventListener("mouseleave",(function(t){t.target.removeEventListener("click",s)}))):"rgb(139, 139, 139)"!==i.style.backgroundColor&&(i.style.backgroundColor="red")},l=function(){p.forEach((function(t){var e=t,r=t.style.backgroundColor;"red"!==r&&"green"!==r||(e.style.backgroundColor="white")}))};if(w.isAI)for(;w.fleet.length>0;){var f=o(w.gameboard.coordinates);i=w.fleet[0],c=void 0,u=void 0,1===(c=Math.ceil(0),u=Math.floor(1),Math.floor(Math.random()*(u-c+1)+c))&&i.rotate(),"OK"===w.gameboard.placeShip(w.fleet[0],f)&&w.fleet.shift()}var v=function(t){h(m.fleet[0],t.target,m.gameboard)};p.forEach((function(t){t.addEventListener("mouseenter",v)})),p.forEach((function(t){t.addEventListener("mouseleave",l)})),window.addEventListener("keyup",(function(t){"r"===t.key&&(l(),m.fleet[0].rotate(),h(m.fleet[0],e,m.gameboard))}));window.addEventListener("click",(function e(){var r,i,c,u,s;0===m.fleet.length&&(p.forEach((function(t){t.removeEventListener("mouseenter",v)})),d.textContent="Battle begins!",r=function(t){g.forEach((function(e){e.addEventListener("click",t)}))},i=function(t){g.forEach((function(e){e.removeEventListener("click",t)}))},c=function(t){var e=t.target.getAttribute("data-coord"),r=w.getAttacked(e);"miss"===r?(t.target.textContent="●",d.textContent="".concat(m.name," attacked ").concat(e," and missed!")):"hit"===r?(t.target.textContent="✕",t.target.style.backgroundColor="rgb(139, 139, 139)",d.textContent="".concat(m.name," attacked ").concat(e," and hit!")):"sunk"===r?(t.target.textContent="✕",t.target.style.backgroundColor="rgb(139, 139, 139)",d.textContent="".concat(m.name," attacked ").concat(e," and sunk the enemy ship!")):"game over"===r&&(t.target.textContent="✕",t.target.style.backgroundColor="rgb(139, 139, 139)",d.textContent="".concat(m.name," sunk all enemy ships and won!"))},u=a(),s=function(){var e,a=(e=n().mark((function t(e){return n().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return c(e),i(s),t.next=4,new Promise((function(t){setTimeout((function(){0!==w.gameboard.ships.length&&function(){var t=o(u);u.splice(u.indexOf(t),1);for(var e,r=m.getAttacked(t),n=0;n<p.length;n+=1)p[n].getAttribute("data-coord")===t&&(e=p[n]);"miss"===r?(e.textContent="●",d.textContent="".concat(w.name," attacked ").concat(t," and missed!")):"hit"===r?(e.textContent="✕",d.textContent="".concat(w.name," attacked ").concat(t," and hit!")):"sunk"===r?(e.textContent="✕",d.textContent="".concat(w.name," attacked ").concat(t," and sunk the enemy ship!")):"game over"===r&&(e.textContent="✕",d.textContent="".concat(w.name," sunk all enemy ships and won!"))}(),t("resolved")}),2e3)}));case 4:r(s),0!==m.gameboard.ships.length&&0!==w.gameboard.ships.length||i(s);case 6:case"end":return t.stop()}}),t)})),function(){var r=this,n=arguments;return new Promise((function(o,a){var i=e.apply(r,n);function c(e){t(i,o,a,c,u,"next",e)}function u(e){t(i,o,a,c,u,"throw",e)}c(void 0)}))});return function(t){return a.apply(this,arguments)}}(),r(s),window.removeEventListener("click",e))}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eUIsSUFDakRJLEVBQWF2QyxFQUFhbEgsSUFHUixTQUFsQnNKLEdBQ0ZHLEVBQVdyQyxZQUFjLElBQ3pCWixFQUFRWSxZQUFSLFVBQXlCRyxFQUFRakgsS0FBakMscUJBQWtEK0ksRUFBbEQsaUJBQzJCLFFBQWxCQyxHQUNURyxFQUFXckMsWUFBYyxJQUN6QlosRUFBUVksWUFBUixVQUF5QkcsRUFBUWpILEtBQWpDLHFCQUFrRCtJLEVBQWxELGNBQzJCLFNBQWxCQyxHQUNURyxFQUFXckMsWUFBYyxJQUN6QlosRUFBUVksWUFBUixVQUF5QkcsRUFBUWpILEtBQWpDLHFCQUFrRCtJLEVBQWxELDhCQUMyQixjQUFsQkMsSUFDVEcsRUFBV3JDLFlBQWMsSUFDekJaLEVBQVFZLFlBQVIsVUFBeUJHLEVBQVFqSCxLQUFqQyxtQ0FPSTZGLEdBRUZqSSxFQUFRLGNBQ1AsUUFFYSxPQUlsQjZLLEVBQWVJLEdBRXNCLElBQW5DN0IsRUFBUXJCLFVBQVVoQixNQUFNbEYsUUFDVyxJQUFuQ3dILEVBQVF0QixVQUFVaEIsTUFBTWxGLFFBRXhCaUosRUFBZ0JHLEdBVEEsMENSdk5mLFdBQ0wsSUFBSWhPLEVBQU9vQyxLQUNQbU0sRUFBT0MsVUFDWCxPQUFPLElBQUkvSSxTQUFRLFNBQVUxQyxFQUFTQyxHQUNwQyxJQUFJb0YsRUFBTXJHLEVBQUcwTSxNQUFNek8sRUFBTXVPLEdBRXpCLFNBQVNsRyxFQUFNOUksR0FDYjRJLEVBQW1CQyxFQUFLckYsRUFBU0MsRUFBUXFGLEVBQU9DLEVBQVEsT0FBUS9JLEdBR2xFLFNBQVMrSSxFQUFPMUksR0FDZHVJLEVBQW1CQyxFQUFLckYsRUFBU0MsRUFBUXFGLEVBQU9DLEVBQVEsUUFBUzFJLEdBR25FeUksT0FBTS9KLFFReU1TLHNEQVlqQnNQLEVBQWVJLEdBVWJOLE9BQU9OLG9CQUFvQixRQUFTTyxPQWtCMUNlLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZ2VuZXJhdGVhaU1vdmUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nZW5lcmF0ZUNvb3JkaW5hdGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL0dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL1BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL1NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBkZWZpbmUoR3AsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCBpbiBtb2Rlcm4gZW5naW5lc1xuICAvLyB3ZSBjYW4gZXhwbGljaXRseSBhY2Nlc3MgZ2xvYmFsVGhpcy4gSW4gb2xkZXIgZW5naW5lcyB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlYWlNb3ZlKGFycmF5KSB7XG4gIGNvbnN0IGdldFJhbmRvbUluY2x1c2l2ZSA9IChtaW4sIG1heCkgPT4ge1xuICAgIGNvbnN0IG1pblZhbCA9IE1hdGguY2VpbChtaW4pO1xuICAgIGNvbnN0IG1heFZhbCA9IE1hdGguZmxvb3IobWF4KTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heFZhbCAtIG1pblZhbCArIDEpICsgbWluVmFsKTtcbiAgfTtcbiAgY29uc3QgbW92ZSA9IGFycmF5W2dldFJhbmRvbUluY2x1c2l2ZSgwLCBhcnJheS5sZW5ndGggLSAxKV07XG4gIHJldHVybiBtb3ZlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVDb29yZGluYXRlcygpIHtcbiAgY29uc3QgYXJyYXkgPSBbXTtcbiAgY29uc3QgbGV0dGVycyA9IFwiQUJDREVGR0hJSlwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxldHRlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBmb3IgKGxldCBuID0gMTsgbiA8PSAxMDsgbiArPSAxKSB7XG4gICAgICBhcnJheS5wdXNoKGxldHRlcnMuY2hhckF0KGkpICsgbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiaW1wb3J0IGdlbmVyYXRlQ29vcmRpbmF0ZXMgZnJvbSBcIi4vZ2VuZXJhdGVDb29yZGluYXRlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lYm9hcmQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvb3JkaW5hdGVzID0gZ2VuZXJhdGVDb29yZGluYXRlcygpO1xuICAgIHRoaXMuc2hpcHMgPSBbXTtcbiAgfVxuXG4gIGdldCBnZXRTaGlwcygpIHtcbiAgICByZXR1cm4gdGhpcy5zaGlwcztcbiAgfVxuXG4gIHBsYWNlU2hpcChzaGlwLCBjb29yZGluYXRlKSB7XG4gICAgY29uc3QgdGFyZ2V0Q29vcmRpbmF0ZXMgPSBbXTtcbiAgICBsZXQgaXNDb3JyZWN0UGxhY2VtZW50ID0gdHJ1ZTtcbiAgICBjb25zdCBsZXR0ZXJzID0gXCJBQkNERUZHSElKXCI7XG4gICAgaWYgKCFzaGlwLmlzVmVydGljYWwpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0YXJnZXRDb29yZGluYXRlcy5wdXNoKFxuICAgICAgICAgIGNvb3JkaW5hdGUuY2hhckF0KDApICsgKE51bWJlcihjb29yZGluYXRlLmNoYXJBdCgxKSkgKyBpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdGFyZ2V0Q29vcmRpbmF0ZXMucHVzaChcbiAgICAgICAgICBsZXR0ZXJzLmNoYXJBdChsZXR0ZXJzLmluZGV4T2YoY29vcmRpbmF0ZS5jaGFyQXQoMCkpICsgaSkgK1xuICAgICAgICAgICAgY29vcmRpbmF0ZS5jaGFyQXQoMSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGFyZ2V0Q29vcmRpbmF0ZXMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgaWYgKHRoaXMuY29vcmRpbmF0ZXMuaW5kZXhPZihjKSA9PT0gLTEpIHtcbiAgICAgICAgaXNDb3JyZWN0UGxhY2VtZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGlzQ29ycmVjdFBsYWNlbWVudCkge1xuICAgICAgc2hpcC5zZXRDb29yZGluYXRlcyh0YXJnZXRDb29yZGluYXRlcyk7XG4gICAgICB0aGlzLnNoaXBzLnB1c2goc2hpcCk7XG4gICAgICB0YXJnZXRDb29yZGluYXRlcy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZXMuc3BsaWNlKHRoaXMuY29vcmRpbmF0ZXMuaW5kZXhPZihjKSwgMSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBcIk9LXCI7XG4gICAgfVxuICAgIHJldHVybiBcIkVSUk9SXCI7XG4gIH1cblxuICByZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGUpIHtcbiAgICBsZXQgb3V0Y29tZSA9IFwibWlzc1wiO1xuICAgIHRoaXMuc2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgaWYgKHNoaXAuY29vcmRpbmF0ZXMuaW5kZXhPZihjb29yZGluYXRlKSAhPT0gLTEpIHtcbiAgICAgICAgc2hpcC5oaXQoY29vcmRpbmF0ZSk7XG4gICAgICAgIG91dGNvbWUgPSBcImhpdFwiO1xuICAgICAgICBpZiAoc2hpcC5pc1N1bmsoKSkge1xuICAgICAgICAgIHRoaXMuc2hpcHMuc3BsaWNlKHRoaXMuc2hpcHMuaW5kZXhPZihzaGlwKSwgMSk7XG4gICAgICAgICAgb3V0Y29tZSA9IFwic3Vua1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNoaXBzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIG91dGNvbWUgPSBcImdhbWUgb3ZlclwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG91dGNvbWU7XG4gIH1cbn1cbiIsImltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4vR2FtZWJvYXJkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXllciB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGZsZWV0KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmZsZWV0ID0gZmxlZXQ7XG4gICAgdGhpcy5nYW1lYm9hcmQgPSBuZXcgR2FtZWJvYXJkKCk7XG4gICAgdGhpcy5pc0FJID0gZmFsc2U7XG4gIH1cblxuICBnZXRBdHRhY2tlZChjb29yZGluYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2soY29vcmRpbmF0ZSk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoaXAge1xuICBjb25zdHJ1Y3RvcihsZW5ndGgpIHtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB0aGlzLmlzVmVydGljYWwgPSBmYWxzZTtcbiAgfVxuXG4gIHNldENvb3JkaW5hdGVzKGFycmF5KSB7XG4gICAgdGhpcy5jb29yZGluYXRlcyA9IGFycmF5O1xuICB9XG5cbiAgZ2V0IGdldENvb3JkaW5hdGVzKCkge1xuICAgIHJldHVybiB0aGlzLmNvb3JkaW5hdGVzO1xuICB9XG5cbiAgcm90YXRlKCkge1xuICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcbiAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzVmVydGljYWwgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGhpdChjb29yZGluYXRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvb3JkaW5hdGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb29yZGluYXRlc1tpXSA9PT0gY29vcmRpbmF0ZSkge1xuICAgICAgICB0aGlzLmNvb3JkaW5hdGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaXNTdW5rKCkge1xuICAgIGlmICh0aGlzLmNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcbmltcG9ydCBnZW5lcmF0ZWFpTW92ZSBmcm9tIFwiLi9nZW5lcmF0ZWFpTW92ZVwiO1xuaW1wb3J0IGdlbmVyYXRlQ29vcmRpbmF0ZXMgZnJvbSBcIi4vZ2VuZXJhdGVDb29yZGluYXRlc1wiO1xuaW1wb3J0IFBsYXllciBmcm9tIFwiLi9QbGF5ZXJcIjtcbmltcG9ydCBTaGlwIGZyb20gXCIuL1NoaXBcIjtcblxuY29uc3QgZ2FtZWJvYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ2FtZWJvYXJkXCIpO1xuY29uc3QgbWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVzc2FnZVwiKTtcbmNvbnN0IGNvb3JkaW5hdGVzQXJyYXkgPSBnZW5lcmF0ZUNvb3JkaW5hdGVzKCk7XG5cbmdhbWVib2FyZHMuZm9yRWFjaCgoYm9hcmQpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkgKz0gMSkge1xuICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImNlbGxcIik7XG4gICAgY2VsbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNvb3JkXCIsIGNvb3JkaW5hdGVzQXJyYXlbaV0pO1xuICAgIGJvYXJkLmFwcGVuZENoaWxkKGNlbGwpO1xuICB9XG59KTtcblxuY29uc3QgcGxheWVyMWNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNwbGF5ZXIxIC5jZWxsXCIpO1xuY29uc3QgcGxheWVyMmNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNwbGF5ZXIyIC5jZWxsXCIpO1xuXG5tZXNzYWdlLnRleHRDb250ZW50ID0gXCJQbGFjZSB5b3VyIHNoaXBzISAocHJlc3MgJ1InIHRvIHJvdGF0ZSlcIjtcbmNvbnN0IGNyZWF0ZUZsZWV0ID0gKCkgPT4ge1xuICBjb25zdCBhY0NhcnJpZXIgPSBuZXcgU2hpcCg1KTtcbiAgY29uc3QgYmF0dGxlc2hpcCA9IG5ldyBTaGlwKDQpO1xuICBjb25zdCBjcnVpc2VyID0gbmV3IFNoaXAoMyk7XG4gIGNvbnN0IGRlc3Ryb3llcjEgPSBuZXcgU2hpcCgyKTtcbiAgY29uc3QgZGVzdHJveWVyMiA9IG5ldyBTaGlwKDIpO1xuICBjb25zdCBzdWJtYXJpbmUxID0gbmV3IFNoaXAoMSk7XG4gIGNvbnN0IHN1Ym1hcmluZTIgPSBuZXcgU2hpcCgxKTtcbiAgY29uc3QgZmxlZXQgPSBbXG4gICAgYWNDYXJyaWVyLFxuICAgIGJhdHRsZXNoaXAsXG4gICAgY3J1aXNlcixcbiAgICBkZXN0cm95ZXIxLFxuICAgIGRlc3Ryb3llcjIsXG4gICAgc3VibWFyaW5lMSxcbiAgICBzdWJtYXJpbmUyLFxuICBdO1xuICByZXR1cm4gZmxlZXQ7XG59O1xuXG5jb25zdCBwbGF5ZXIxID0gbmV3IFBsYXllcihcIlBsYXllciAxXCIsIGNyZWF0ZUZsZWV0KCkpO1xuY29uc3QgcGxheWVyMiA9IG5ldyBQbGF5ZXIoXCJDb21wdXRlclwiLCBjcmVhdGVGbGVldCgpKTtcbnBsYXllcjIuaXNBSSA9IHRydWU7XG5cbmNvbnN0IGdhbWVTdGFydCA9ICgpID0+IHtcbiAgY29uc3QgZ2V0UmFuZG9tSW5jbHVzaXZlID0gKG1pbiwgbWF4KSA9PiB7XG4gICAgY29uc3QgbWluVmFsID0gTWF0aC5jZWlsKG1pbik7XG4gICAgY29uc3QgbWF4VmFsID0gTWF0aC5mbG9vcihtYXgpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4VmFsIC0gbWluVmFsICsgMSkgKyBtaW5WYWwpO1xuICB9O1xuICBjb25zdCByb3RhdGVSYW5kb20gPSAoc2hpcCkgPT4ge1xuICAgIGNvbnN0IHJvdGF0ZSA9IGdldFJhbmRvbUluY2x1c2l2ZSgwLCAxKTtcbiAgICBpZiAocm90YXRlID09PSAxKSB7XG4gICAgICBzaGlwLnJvdGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBsZXQgY3VycmVudENlbGw7XG4gIGxldCBjdXJyZW50Q29vcmRpbmF0ZXM7XG5cbiAgY29uc3QgcGxhY2VTaGlwID0gKGUpID0+IHtcbiAgICBwbGF5ZXIxLmdhbWVib2FyZC5wbGFjZVNoaXAoXG4gICAgICBwbGF5ZXIxLmZsZWV0WzBdLFxuICAgICAgZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb29yZFwiKVxuICAgICk7XG4gICAgcGxheWVyMWNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxheWVyMS5mbGVldFswXS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY2VsbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvb3JkXCIpID09PSBjdXJyZW50Q29vcmRpbmF0ZXNbaV0pIHtcbiAgICAgICAgICBjb25zdCBzaGlwQ2VsbCA9IGNlbGw7XG4gICAgICAgICAgc2hpcENlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2IoMTM5LCAxMzksIDEzOSlcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHBsYXllcjEuZmxlZXQuc2hpZnQoKTtcbiAgfTtcblxuICBjb25zdCBoaWdobGlnaHRTaGlwID0gKHNoaXAsIHRhcmdldCwgYm9hcmQpID0+IHtcbiAgICBjb25zdCB0YXJnZXRTaGlwQ29vcmRpbmF0ZXMgPSBbXTtcbiAgICBjb25zdCB0YXJnZXRDZWxsID0gdGFyZ2V0O1xuICAgIGN1cnJlbnRDZWxsID0gdGFyZ2V0O1xuICAgIGxldCBpblJhbmdlID0gdHJ1ZTtcbiAgICBjb25zdCBsZXR0ZXJzID0gXCJBQkNERUZHSElKXCI7XG4gICAgY29uc3QgdGFyZ2V0TGV0dGVyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtY29vcmRcIikuY2hhckF0KDApO1xuICAgIGNvbnN0IHRhcmdldE51bWJlciA9IE51bWJlcih0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb29yZFwiKS5zbGljZSgxKSk7XG4gICAgaWYgKCFzaGlwLmlzVmVydGljYWwpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0YXJnZXRTaGlwQ29vcmRpbmF0ZXMucHVzaCh0YXJnZXRMZXR0ZXIgKyAodGFyZ2V0TnVtYmVyICsgaSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdGFyZ2V0U2hpcENvb3JkaW5hdGVzLnB1c2goXG4gICAgICAgICAgbGV0dGVycy5jaGFyQXQobGV0dGVycy5pbmRleE9mKHRhcmdldExldHRlcikgKyBpKSArIHRhcmdldE51bWJlclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBjdXJyZW50Q29vcmRpbmF0ZXMgPSB0YXJnZXRTaGlwQ29vcmRpbmF0ZXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRTaGlwQ29vcmRpbmF0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChib2FyZC5jb29yZGluYXRlcy5pbmRleE9mKHRhcmdldFNoaXBDb29yZGluYXRlc1tpXSkgPT09IC0xKSB7XG4gICAgICAgIGluUmFuZ2UgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpblJhbmdlKSB7XG4gICAgICBpZiAodGFyZ2V0Q2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgIT09IFwicmdiKDEzOSwgMTM5LCAxMzkpXCIpIHtcbiAgICAgICAgdGFyZ2V0Q2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwbGF5ZXIxY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhcmdldFNoaXBDb29yZGluYXRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChjZWxsLmdldEF0dHJpYnV0ZShcImRhdGEtY29vcmRcIikgPT09IHRhcmdldFNoaXBDb29yZGluYXRlc1tpXSkge1xuICAgICAgICAgICAgY29uc3QgZ3JlZW5DZWxsID0gY2VsbDtcbiAgICAgICAgICAgIGdyZWVuQ2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRhcmdldENlbGwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHBsYWNlU2hpcCk7XG4gICAgICB0YXJnZXRDZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIChlKSA9PiB7XG4gICAgICAgIGUudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBwbGFjZVNoaXApO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNsZWFyQmcgPSAoKSA9PiB7XG4gICAgcGxheWVyMWNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGNlbGw7XG4gICAgICBjb25zdCBiZ0NvbG9yID0gY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICBpZiAoYmdDb2xvciA9PT0gXCJyZWRcIiB8fCBiZ0NvbG9yID09PSBcImdyZWVuXCIpIHtcbiAgICAgICAgdGFyZ2V0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwid2hpdGVcIjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCByb3RhdGVTaGlwID0gKGUpID0+IHtcbiAgICBpZiAoZS5rZXkgPT09IFwiclwiKSB7XG4gICAgICBjbGVhckJnKCk7XG4gICAgICBwbGF5ZXIxLmZsZWV0WzBdLnJvdGF0ZSgpO1xuICAgICAgaGlnaGxpZ2h0U2hpcChwbGF5ZXIxLmZsZWV0WzBdLCBjdXJyZW50Q2VsbCwgcGxheWVyMS5nYW1lYm9hcmQpO1xuICAgIH1cbiAgfTtcblxuICBpZiAocGxheWVyMi5pc0FJKSB7XG4gICAgd2hpbGUgKHBsYXllcjIuZmxlZXQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbW92ZSA9IGdlbmVyYXRlYWlNb3ZlKHBsYXllcjIuZ2FtZWJvYXJkLmNvb3JkaW5hdGVzKTtcbiAgICAgIHJvdGF0ZVJhbmRvbShwbGF5ZXIyLmZsZWV0WzBdKTtcbiAgICAgIGNvbnN0IHBsYWNlID0gcGxheWVyMi5nYW1lYm9hcmQucGxhY2VTaGlwKHBsYXllcjIuZmxlZXRbMF0sIG1vdmUpO1xuICAgICAgaWYgKHBsYWNlID09PSBcIk9LXCIpIHtcbiAgICAgICAgcGxheWVyMi5mbGVldC5zaGlmdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhpZ2hsaWdodCA9IChlKSA9PiB7XG4gICAgaGlnaGxpZ2h0U2hpcChwbGF5ZXIxLmZsZWV0WzBdLCBlLnRhcmdldCwgcGxheWVyMS5nYW1lYm9hcmQpO1xuICB9O1xuXG4gIHBsYXllcjFjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCBoaWdobGlnaHQpO1xuICB9KTtcblxuICBwbGF5ZXIxY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgY2xlYXJCZyk7XG4gIH0pO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgcm90YXRlU2hpcCk7XG5cbiAgY29uc3QgYmF0dGxlU3RhcnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZW5hYmxlQ29udHJvbHMgPSAoZnVuYykgPT4ge1xuICAgICAgcGxheWVyMmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuYyk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGRpc2FibGVDb250cm9scyA9IChmdW5jKSA9PiB7XG4gICAgICBwbGF5ZXIyY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICBjZWxsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgYXR0YWNrQ29tcHV0ZXIgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgYXR0YWNrQ29vcmRpbmF0ZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtY29vcmRcIik7XG4gICAgICBjb25zdCBhdHRhY2tPdXRjb21lID0gcGxheWVyMi5nZXRBdHRhY2tlZChhdHRhY2tDb29yZGluYXRlKTtcbiAgICAgIGlmIChhdHRhY2tPdXRjb21lID09PSBcIm1pc3NcIikge1xuICAgICAgICBlLnRhcmdldC50ZXh0Q29udGVudCA9IFwi4pePXCI7XG4gICAgICAgIG1lc3NhZ2UudGV4dENvbnRlbnQgPSBgJHtwbGF5ZXIxLm5hbWV9IGF0dGFja2VkICR7YXR0YWNrQ29vcmRpbmF0ZX0gYW5kIG1pc3NlZCFgO1xuICAgICAgfSBlbHNlIGlmIChhdHRhY2tPdXRjb21lID09PSBcImhpdFwiKSB7XG4gICAgICAgIGUudGFyZ2V0LnRleHRDb250ZW50ID0gXCLinJVcIjtcbiAgICAgICAgZS50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2IoMTM5LCAxMzksIDEzOSlcIjtcbiAgICAgICAgbWVzc2FnZS50ZXh0Q29udGVudCA9IGAke3BsYXllcjEubmFtZX0gYXR0YWNrZWQgJHthdHRhY2tDb29yZGluYXRlfSBhbmQgaGl0IWA7XG4gICAgICB9IGVsc2UgaWYgKGF0dGFja091dGNvbWUgPT09IFwic3Vua1wiKSB7XG4gICAgICAgIGUudGFyZ2V0LnRleHRDb250ZW50ID0gXCLinJVcIjtcbiAgICAgICAgZS50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2IoMTM5LCAxMzksIDEzOSlcIjtcbiAgICAgICAgbWVzc2FnZS50ZXh0Q29udGVudCA9IGAke3BsYXllcjEubmFtZX0gYXR0YWNrZWQgJHthdHRhY2tDb29yZGluYXRlfSBhbmQgc3VuayB0aGUgZW5lbXkgc2hpcCFgO1xuICAgICAgfSBlbHNlIGlmIChhdHRhY2tPdXRjb21lID09PSBcImdhbWUgb3ZlclwiKSB7XG4gICAgICAgIGUudGFyZ2V0LnRleHRDb250ZW50ID0gXCLinJVcIjtcbiAgICAgICAgZS50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2IoMTM5LCAxMzksIDEzOSlcIjtcbiAgICAgICAgbWVzc2FnZS50ZXh0Q29udGVudCA9IGAke3BsYXllcjEubmFtZX0gc3VuayBhbGwgZW5lbXkgc2hpcHMgYW5kIHdvbiFgO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgYWlBcnJheSA9IGdlbmVyYXRlQ29vcmRpbmF0ZXMoKTtcbiAgICBjb25zdCByZWNlaXZlQXR0YWNrID0gKCkgPT4ge1xuICAgICAgY29uc3QgYXR0YWNrQ29vcmRpbmF0ZSA9IGdlbmVyYXRlYWlNb3ZlKGFpQXJyYXkpO1xuICAgICAgYWlBcnJheS5zcGxpY2UoYWlBcnJheS5pbmRleE9mKGF0dGFja0Nvb3JkaW5hdGUpLCAxKTtcbiAgICAgIGNvbnN0IGF0dGFja091dGNvbWUgPSBwbGF5ZXIxLmdldEF0dGFja2VkKGF0dGFja0Nvb3JkaW5hdGUpO1xuICAgICAgbGV0IGF0dGFja0NlbGw7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYXllcjFjZWxscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGxheWVyMWNlbGxzW2ldLmdldEF0dHJpYnV0ZShcImRhdGEtY29vcmRcIikgPT09IGF0dGFja0Nvb3JkaW5hdGUpIHtcbiAgICAgICAgICBhdHRhY2tDZWxsID0gcGxheWVyMWNlbGxzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXR0YWNrT3V0Y29tZSA9PT0gXCJtaXNzXCIpIHtcbiAgICAgICAgYXR0YWNrQ2VsbC50ZXh0Q29udGVudCA9IFwi4pePXCI7XG4gICAgICAgIG1lc3NhZ2UudGV4dENvbnRlbnQgPSBgJHtwbGF5ZXIyLm5hbWV9IGF0dGFja2VkICR7YXR0YWNrQ29vcmRpbmF0ZX0gYW5kIG1pc3NlZCFgO1xuICAgICAgfSBlbHNlIGlmIChhdHRhY2tPdXRjb21lID09PSBcImhpdFwiKSB7XG4gICAgICAgIGF0dGFja0NlbGwudGV4dENvbnRlbnQgPSBcIuKclVwiO1xuICAgICAgICBtZXNzYWdlLnRleHRDb250ZW50ID0gYCR7cGxheWVyMi5uYW1lfSBhdHRhY2tlZCAke2F0dGFja0Nvb3JkaW5hdGV9IGFuZCBoaXQhYDtcbiAgICAgIH0gZWxzZSBpZiAoYXR0YWNrT3V0Y29tZSA9PT0gXCJzdW5rXCIpIHtcbiAgICAgICAgYXR0YWNrQ2VsbC50ZXh0Q29udGVudCA9IFwi4pyVXCI7XG4gICAgICAgIG1lc3NhZ2UudGV4dENvbnRlbnQgPSBgJHtwbGF5ZXIyLm5hbWV9IGF0dGFja2VkICR7YXR0YWNrQ29vcmRpbmF0ZX0gYW5kIHN1bmsgdGhlIGVuZW15IHNoaXAhYDtcbiAgICAgIH0gZWxzZSBpZiAoYXR0YWNrT3V0Y29tZSA9PT0gXCJnYW1lIG92ZXJcIikge1xuICAgICAgICBhdHRhY2tDZWxsLnRleHRDb250ZW50ID0gXCLinJVcIjtcbiAgICAgICAgbWVzc2FnZS50ZXh0Q29udGVudCA9IGAke3BsYXllcjIubmFtZX0gc3VuayBhbGwgZW5lbXkgc2hpcHMgYW5kIHdvbiFgO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgY29tcFR1cm4gPSAoKSA9PlxuICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKHBsYXllcjIuZ2FtZWJvYXJkLnNoaXBzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgcmVjZWl2ZUF0dGFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKFwicmVzb2x2ZWRcIik7XG4gICAgICAgIH0sIDIwMDApO1xuICAgICAgfSk7XG4gICAgY29uc3QgYXR0YWNrQ3ljbGUgPSBhc3luYyAoZSkgPT4ge1xuICAgICAgYXR0YWNrQ29tcHV0ZXIoZSk7XG4gICAgICBkaXNhYmxlQ29udHJvbHMoYXR0YWNrQ3ljbGUpO1xuICAgICAgYXdhaXQgY29tcFR1cm4oKTtcbiAgICAgIGVuYWJsZUNvbnRyb2xzKGF0dGFja0N5Y2xlKTtcbiAgICAgIGlmIChcbiAgICAgICAgcGxheWVyMS5nYW1lYm9hcmQuc2hpcHMubGVuZ3RoID09PSAwIHx8XG4gICAgICAgIHBsYXllcjIuZ2FtZWJvYXJkLnNoaXBzLmxlbmd0aCA9PT0gMFxuICAgICAgKSB7XG4gICAgICAgIGRpc2FibGVDb250cm9scyhhdHRhY2tDeWNsZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBlbmFibGVDb250cm9scyhhdHRhY2tDeWNsZSk7XG4gIH07XG5cbiAgY29uc3QgZGlzYWJsZVBsYWNlbWVudCA9ICgpID0+IHtcbiAgICBpZiAocGxheWVyMS5mbGVldC5sZW5ndGggPT09IDApIHtcbiAgICAgIHBsYXllcjFjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgIGNlbGwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgaGlnaGxpZ2h0KTtcbiAgICAgIH0pO1xuICAgICAgbWVzc2FnZS50ZXh0Q29udGVudCA9IFwiQmF0dGxlIGJlZ2lucyFcIjtcbiAgICAgIGJhdHRsZVN0YXJ0KCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGRpc2FibGVQbGFjZW1lbnQpO1xuICAgIH1cbiAgfTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGRpc2FibGVQbGFjZW1lbnQpO1xuICAvKlxuICBwbGF5ZXIyLmdhbWVib2FyZC5zaGlwcy5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgc2hpcC5jb29yZGluYXRlcy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICBwbGF5ZXIyY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICBpZiAoYyA9PT0gY2VsbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvb3JkXCIpKSB7XG4gICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwic2hpcFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuKi9cbn07XG5cbmdhbWVTdGFydCgpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJydW50aW1lIiwidW5kZWZpbmVkIiwiT3AiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsIiRTeW1ib2wiLCJTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwib2JqIiwia2V5IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwibWV0aG9kIiwiYXJnIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJFcnJvciIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiZG9uZSIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiZm4iLCJjYWxsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwidGhpcyIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXN1bHQiLCJfX2F3YWl0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJUeXBlRXJyb3IiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJsZW5ndGgiLCJpIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsImtleXMiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwibyIsImdldCIsInByb3AiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsImdlbmVyYXRlYWlNb3ZlIiwiYXJyYXkiLCJtYXgiLCJtaW5WYWwiLCJtYXhWYWwiLCJNYXRoIiwiY2VpbCIsImZsb29yIiwicmFuZG9tIiwiZ2VuZXJhdGVDb29yZGluYXRlcyIsImxldHRlcnMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJHYW1lYm9hcmQiLCJjb29yZGluYXRlcyIsInNoaXBzIiwic2hpcCIsImNvb3JkaW5hdGUiLCJ0YXJnZXRDb29yZGluYXRlcyIsImlzQ29ycmVjdFBsYWNlbWVudCIsImlzVmVydGljYWwiLCJpbmRleE9mIiwiTnVtYmVyIiwiYyIsInNldENvb3JkaW5hdGVzIiwic3BsaWNlIiwib3V0Y29tZSIsImhpdCIsImlzU3VuayIsIlBsYXllciIsImZsZWV0IiwiZ2FtZWJvYXJkIiwiaXNBSSIsInJlY2VpdmVBdHRhY2siLCJTaGlwIiwiZ2FtZWJvYXJkcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIm1lc3NhZ2UiLCJxdWVyeVNlbGVjdG9yIiwiY29vcmRpbmF0ZXNBcnJheSIsImJvYXJkIiwiY2VsbCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsInBsYXllcjFjZWxscyIsInBsYXllcjJjZWxscyIsInRleHRDb250ZW50IiwiY3JlYXRlRmxlZXQiLCJwbGF5ZXIxIiwicGxheWVyMiIsImN1cnJlbnRDZWxsIiwiY3VycmVudENvb3JkaW5hdGVzIiwicGxhY2VTaGlwIiwiZSIsImdldEF0dHJpYnV0ZSIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwic2hpZnQiLCJoaWdobGlnaHRTaGlwIiwidGFyZ2V0U2hpcENvb3JkaW5hdGVzIiwidGFyZ2V0Q2VsbCIsImluUmFuZ2UiLCJ0YXJnZXRMZXR0ZXIiLCJ0YXJnZXROdW1iZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsZWFyQmciLCJiZ0NvbG9yIiwibW92ZSIsInJvdGF0ZSIsImhpZ2hsaWdodCIsIndpbmRvdyIsImRpc2FibGVQbGFjZW1lbnQiLCJlbmFibGVDb250cm9scyIsImRpc2FibGVDb250cm9scyIsImF0dGFja0NvbXB1dGVyIiwiYWlBcnJheSIsImF0dGFja0N5Y2xlIiwiZnVuYyIsImF0dGFja0Nvb3JkaW5hdGUiLCJhdHRhY2tPdXRjb21lIiwiZ2V0QXR0YWNrZWQiLCJzZXRUaW1lb3V0IiwiYXR0YWNrQ2VsbCIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImdhbWVTdGFydCJdLCJzb3VyY2VSb290IjoiIn0=